<?php
/**
 * OperationIdentifier
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Rosetta
 *
 * A Standard for Blockchain Interaction
 *
 * The version of the OpenAPI document: 1.3.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the OperationIdentifier model.
 *
 * The operation_identifier uniquely identifies an operation within a transaction.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class OperationIdentifier 
{
        /**
     * The operation index is used to ensure each operation has a unique identifier within a transaction.  To clarify, there may not be any notion of an operation index in the blockchain being described.
     *
     * @var int
     * @SerializedName("index")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     * @Assert\GreaterThanOrEqual(0)
     */
    protected $index;

    /**
     * Some blockchains specify an operation index that is essential for client use. For example, Bitcoin uses a network_index to identify which UTXO was used in a transaction.  network_index should not be populated if there is no notion of an operation index in a blockchain (typically most account-based blockchains).
     *
     * @var int|null
     * @SerializedName("network_index")
     * @Assert\Type("int")
     * @Type("int")
     * @Assert\GreaterThanOrEqual(0)
     */
    protected $networkIndex;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->index = isset($data['index']) ? $data['index'] : null;
        $this->networkIndex = isset($data['networkIndex']) ? $data['networkIndex'] : null;
    }

    /**
     * Gets index.
     *
     * @return int
     */
    public function getIndex()
    {
        return $this->index;
    }

    /**
     * Sets index.
     *
     * @param int $index  The operation index is used to ensure each operation has a unique identifier within a transaction.  To clarify, there may not be any notion of an operation index in the blockchain being described.
     *
     * @return $this
     */
    public function setIndex($index)
    {
        $this->index = $index;

        return $this;
    }

    /**
     * Gets networkIndex.
     *
     * @return int|null
     */
    public function getNetworkIndex()
    {
        return $this->networkIndex;
    }

    /**
     * Sets networkIndex.
     *
     * @param int|null $networkIndex  Some blockchains specify an operation index that is essential for client use. For example, Bitcoin uses a network_index to identify which UTXO was used in a transaction.  network_index should not be populated if there is no notion of an operation index in a blockchain (typically most account-based blockchains).
     *
     * @return $this
     */
    public function setNetworkIndex($networkIndex = null)
    {
        $this->networkIndex = $networkIndex;

        return $this;
    }
}


