<?php
/**
 * Transaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Rosetta
 *
 * A Standard for Blockchain Interaction
 *
 * The version of the OpenAPI document: 1.3.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the Transaction model.
 *
 * Transactions contain an array of Operations that are attributable to the same TransactionIdentifier.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class Transaction 
{
        /**
     * @var OpenAPI\Server\Model\TransactionIdentifier
     * @SerializedName("transaction_identifier")
     * @Assert\NotNull()
     * @Assert\Type("OpenAPI\Server\Model\TransactionIdentifier")
     * @Type("OpenAPI\Server\Model\TransactionIdentifier")
     */
    protected $transactionIdentifier;

    /**
     * @var OpenAPI\Server\Model\Operation[]
     * @SerializedName("operations")
     * @Assert\NotNull()
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\Operation")
     * })
     * @Type("array<OpenAPI\Server\Model\Operation>")
     */
    protected $operations;

    /**
     * Transactions that are related to other transactions (like a cross-shard transactioin) should include the tranaction_identifier of these transactions in the metadata.
     *
     * @var array|null
     * @SerializedName("metadata")
     * @Assert\Type("array")
     * @Type("array")
     */
    protected $metadata;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->transactionIdentifier = isset($data['transactionIdentifier']) ? $data['transactionIdentifier'] : null;
        $this->operations = isset($data['operations']) ? $data['operations'] : null;
        $this->metadata = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Gets transactionIdentifier.
     *
     * @return OpenAPI\Server\Model\TransactionIdentifier
     */
    public function getTransactionIdentifier(): TransactionIdentifier
    {
        return $this->transactionIdentifier;
    }

    /**
     * Sets transactionIdentifier.
     *
     * @param OpenAPI\Server\Model\TransactionIdentifier $transactionIdentifier
     *
     * @return $this
     */
    public function setTransactionIdentifier(TransactionIdentifier $transactionIdentifier): TransactionIdentifier
    {
        $this->transactionIdentifier = $transactionIdentifier;

        return $this;
    }

    /**
     * Gets operations.
     *
     * @return OpenAPI\Server\Model\Operation[]
     */
    public function getOperations(): array
    {
        return $this->operations;
    }

    /**
     * Sets operations.
     *
     * @param OpenAPI\Server\Model\Operation[] $operations
     *
     * @return $this
     */
    public function setOperations(array $operations): array
    {
        $this->operations = $operations;

        return $this;
    }

    /**
     * Gets metadata.
     *
     * @return array|null
     */
    public function getMetadata(): ?array
    {
        return $this->metadata;
    }

    /**
     * Sets metadata.
     *
     * @param array|null $metadata  Transactions that are related to other transactions (like a cross-shard transactioin) should include the tranaction_identifier of these transactions in the metadata.
     *
     * @return $this
     */
    public function setMetadata(array $metadata = null): ?array
    {
        $this->metadata = $metadata;

        return $this;
    }
}


