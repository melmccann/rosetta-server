<?php
/**
 * AccountBalanceResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Rosetta
 *
 * A Standard for Blockchain Interaction
 *
 * The version of the OpenAPI document: 1.3.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the AccountBalanceResponse model.
 *
 * An AccountBalanceResponse is returned on the /account/balance endpoint. If an account has a balance for each AccountIdentifier describing it (ex: an ERC-20 token balance on a few smart contracts), an account balance request must be made with each AccountIdentifier.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class AccountBalanceResponse 
{
        /**
     * @var OpenAPI\Server\Model\BlockIdentifier
     * @SerializedName("block_identifier")
     * @Assert\NotNull()
     * @Assert\Type("OpenAPI\Server\Model\BlockIdentifier")
     * @Type("OpenAPI\Server\Model\BlockIdentifier")
     */
    protected $blockIdentifier;

    /**
     * A single account may have a balance in multiple currencies.
     *
     * @var OpenAPI\Server\Model\Amount[]
     * @SerializedName("balances")
     * @Assert\NotNull()
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\Amount")
     * })
     * @Type("array<OpenAPI\Server\Model\Amount>")
     */
    protected $balances;

    /**
     * Account-based blockchains that utilize a nonce or sequence number should include that number in the metadata. This number could be unique to the identifier or global across the account address.
     *
     * @var array|null
     * @SerializedName("metadata")
     * @Assert\Type("array")
     * @Type("array")
     */
    protected $metadata;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->blockIdentifier = isset($data['blockIdentifier']) ? $data['blockIdentifier'] : null;
        $this->balances = isset($data['balances']) ? $data['balances'] : null;
        $this->metadata = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Gets blockIdentifier.
     *
     * @return OpenAPI\Server\Model\BlockIdentifier
     */
    public function getBlockIdentifier(): BlockIdentifier
    {
        return $this->blockIdentifier;
    }

    /**
     * Sets blockIdentifier.
     *
     * @param OpenAPI\Server\Model\BlockIdentifier $blockIdentifier
     *
     * @return $this
     */
    public function setBlockIdentifier(BlockIdentifier $blockIdentifier): BlockIdentifier
    {
        $this->blockIdentifier = $blockIdentifier;

        return $this;
    }

    /**
     * Gets balances.
     *
     * @return OpenAPI\Server\Model\Amount[]
     */
    public function getBalances(): array
    {
        return $this->balances;
    }

    /**
     * Sets balances.
     *
     * @param OpenAPI\Server\Model\Amount[] $balances  A single account may have a balance in multiple currencies.
     *
     * @return $this
     */
    public function setBalances(array $balances): array
    {
        $this->balances = $balances;

        return $this;
    }

    /**
     * Gets metadata.
     *
     * @return array|null
     */
    public function getMetadata(): ?array
    {
        return $this->metadata;
    }

    /**
     * Sets metadata.
     *
     * @param array|null $metadata  Account-based blockchains that utilize a nonce or sequence number should include that number in the metadata. This number could be unique to the identifier or global across the account address.
     *
     * @return $this
     */
    public function setMetadata(array $metadata = null): ?array
    {
        $this->metadata = $metadata;

        return $this;
    }
}


