<?php
/**
 * Operation
 *
 * PHP version 5
 *
 * @category Class
 * @package  melmccann\rosettaserverstubs\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Rosetta
 *
 * A Standard for Blockchain Interaction
 *
 * The version of the OpenAPI document: 1.3.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace melmccann\rosettaserverstubs\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the Operation model.
 *
 * Operations contain all balance-changing information within a transaction. They are always one-sided (only affect 1 AccountIdentifier) and can succeed or fail independently from a Transaction.
 *
 * @package melmccann\rosettaserverstubs\Model
 * @author  OpenAPI Generator team
 */
class Operation 
{
        /**
     * @var melmccann\rosettaserverstubs\Model\OperationIdentifier
     * @SerializedName("operation_identifier")
     * @Assert\NotNull()
     * @Assert\Type("melmccann\rosettaserverstubs\Model\OperationIdentifier")
     * @Type("melmccann\rosettaserverstubs\Model\OperationIdentifier")
     */
    protected $operationIdentifier;

    /**
     * Restrict referenced related_operations to identifier indexes &lt; the current operation_identifier.index. This ensures there exists a clear DAG-structure of relations.  Since operations are one-sided, one could imagine relating operations in a single transfer or linking operations in a call tree.
     *
     * @var melmccann\rosettaserverstubs\Model\OperationIdentifier[]|null
     * @SerializedName("related_operations")
     * @Assert\All({
     *   @Assert\Type("melmccann\rosettaserverstubs\Model\OperationIdentifier")
     * })
     * @Type("array<melmccann\rosettaserverstubs\Model\OperationIdentifier>")
     */
    protected $relatedOperations;

    /**
     * The network-specific type of the operation. Ensure that any type that can be returned here is also specified in the NetowrkStatus. This can be very useful to downstream consumers that parse all block data.
     *
     * @var string
     * @SerializedName("type")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $type;

    /**
     * The network-specific status of the operation. Status is not defined on the transaction object because blockchains with smart contracts may have transactions that partially apply.  Blockchains with atomic transactions (all operations succeed or all operations fail) will have the same status for each operation.
     *
     * @var string
     * @SerializedName("status")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $status;

    /**
     * @var melmccann\rosettaserverstubs\Model\AccountIdentifier|null
     * @SerializedName("account")
     * @Assert\Type("melmccann\rosettaserverstubs\Model\AccountIdentifier")
     * @Type("melmccann\rosettaserverstubs\Model\AccountIdentifier")
     */
    protected $account;

    /**
     * @var melmccann\rosettaserverstubs\Model\Amount|null
     * @SerializedName("amount")
     * @Assert\Type("melmccann\rosettaserverstubs\Model\Amount")
     * @Type("melmccann\rosettaserverstubs\Model\Amount")
     */
    protected $amount;

    /**
     * @var array|null
     * @SerializedName("metadata")
     * @Assert\Type("array")
     * @Type("array")
     */
    protected $metadata;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->operationIdentifier = isset($data['operationIdentifier']) ? $data['operationIdentifier'] : null;
        $this->relatedOperations = isset($data['relatedOperations']) ? $data['relatedOperations'] : null;
        $this->type = isset($data['type']) ? $data['type'] : null;
        $this->status = isset($data['status']) ? $data['status'] : null;
        $this->account = isset($data['account']) ? $data['account'] : null;
        $this->amount = isset($data['amount']) ? $data['amount'] : null;
        $this->metadata = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Gets operationIdentifier.
     *
     * @return melmccann\rosettaserverstubs\Model\OperationIdentifier
     */
    public function getOperationIdentifier(): OperationIdentifier
    {
        return $this->operationIdentifier;
    }

    /**
     * Sets operationIdentifier.
     *
     * @param melmccann\rosettaserverstubs\Model\OperationIdentifier $operationIdentifier
     *
     * @return $this
     */
    public function setOperationIdentifier(OperationIdentifier $operationIdentifier): OperationIdentifier
    {
        $this->operationIdentifier = $operationIdentifier;

        return $this;
    }

    /**
     * Gets relatedOperations.
     *
     * @return melmccann\rosettaserverstubs\Model\OperationIdentifier[]|null
     */
    public function getRelatedOperations(): ?array
    {
        return $this->relatedOperations;
    }

    /**
     * Sets relatedOperations.
     *
     * @param melmccann\rosettaserverstubs\Model\OperationIdentifier[]|null $relatedOperations  Restrict referenced related_operations to identifier indexes < the current operation_identifier.index. This ensures there exists a clear DAG-structure of relations.  Since operations are one-sided, one could imagine relating operations in a single transfer or linking operations in a call tree.
     *
     * @return $this
     */
    public function setRelatedOperations(array $relatedOperations = null): ?array
    {
        $this->relatedOperations = $relatedOperations;

        return $this;
    }

    /**
     * Gets type.
     *
     * @return string
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * Sets type.
     *
     * @param string $type  The network-specific type of the operation. Ensure that any type that can be returned here is also specified in the NetowrkStatus. This can be very useful to downstream consumers that parse all block data.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->type = $type;

        return $this;
    }

    /**
     * Gets status.
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->status;
    }

    /**
     * Sets status.
     *
     * @param string $status  The network-specific status of the operation. Status is not defined on the transaction object because blockchains with smart contracts may have transactions that partially apply.  Blockchains with atomic transactions (all operations succeed or all operations fail) will have the same status for each operation.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->status = $status;

        return $this;
    }

    /**
     * Gets account.
     *
     * @return melmccann\rosettaserverstubs\Model\AccountIdentifier|null
     */
    public function getAccount(): ?AccountIdentifier
    {
        return $this->account;
    }

    /**
     * Sets account.
     *
     * @param melmccann\rosettaserverstubs\Model\AccountIdentifier|null $account
     *
     * @return $this
     */
    public function setAccount(AccountIdentifier $account = null): ?AccountIdentifier
    {
        $this->account = $account;

        return $this;
    }

    /**
     * Gets amount.
     *
     * @return melmccann\rosettaserverstubs\Model\Amount|null
     */
    public function getAmount(): ?Amount
    {
        return $this->amount;
    }

    /**
     * Sets amount.
     *
     * @param melmccann\rosettaserverstubs\Model\Amount|null $amount
     *
     * @return $this
     */
    public function setAmount(Amount $amount = null): ?Amount
    {
        $this->amount = $amount;

        return $this;
    }

    /**
     * Gets metadata.
     *
     * @return array|null
     */
    public function getMetadata(): ?array
    {
        return $this->metadata;
    }

    /**
     * Sets metadata.
     *
     * @param array|null $metadata
     *
     * @return $this
     */
    public function setMetadata(array $metadata = null): ?array
    {
        $this->metadata = $metadata;

        return $this;
    }
}


