<?php
/**
 * Block
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Server\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Rosetta
 *
 * A Standard for Blockchain Interaction
 *
 * The version of the OpenAPI document: 1.3.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace OpenAPI\Server\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the Block model.
 *
 * Blocks contain an array of Transactions that occurred at a particular BlockIdentifier.
 *
 * @package OpenAPI\Server\Model
 * @author  OpenAPI Generator team
 */
class Block 
{
        /**
     * @var OpenAPI\Server\Model\BlockIdentifier
     * @SerializedName("block_identifier")
     * @Assert\NotNull()
     * @Assert\Type("OpenAPI\Server\Model\BlockIdentifier")
     * @Type("OpenAPI\Server\Model\BlockIdentifier")
     */
    protected $blockIdentifier;

    /**
     * @var OpenAPI\Server\Model\BlockIdentifier
     * @SerializedName("parent_block_identifier")
     * @Assert\NotNull()
     * @Assert\Type("OpenAPI\Server\Model\BlockIdentifier")
     * @Type("OpenAPI\Server\Model\BlockIdentifier")
     */
    protected $parentBlockIdentifier;

    /**
     * The timestamp of the block in milliseconds since the Unix Epoch. The timestamp is stored in milliseconds because some blockchains produce blocks more often than once a second.
     *
     * @var int
     * @SerializedName("timestamp")
     * @Assert\NotNull()
     * @Assert\Type("int")
     * @Type("int")
     * @Assert\GreaterThanOrEqual(0)
     */
    protected $timestamp;

    /**
     * @var OpenAPI\Server\Model\Transaction[]
     * @SerializedName("transactions")
     * @Assert\NotNull()
     * @Assert\All({
     *   @Assert\Type("OpenAPI\Server\Model\Transaction")
     * })
     * @Type("array<OpenAPI\Server\Model\Transaction>")
     */
    protected $transactions;

    /**
     * @var array|null
     * @SerializedName("metadata")
     * @Assert\Type("array")
     * @Type("array")
     */
    protected $metadata;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->blockIdentifier = isset($data['blockIdentifier']) ? $data['blockIdentifier'] : null;
        $this->parentBlockIdentifier = isset($data['parentBlockIdentifier']) ? $data['parentBlockIdentifier'] : null;
        $this->timestamp = isset($data['timestamp']) ? $data['timestamp'] : null;
        $this->transactions = isset($data['transactions']) ? $data['transactions'] : null;
        $this->metadata = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Gets blockIdentifier.
     *
     * @return OpenAPI\Server\Model\BlockIdentifier
     */
    public function getBlockIdentifier(): BlockIdentifier
    {
        return $this->blockIdentifier;
    }

    /**
     * Sets blockIdentifier.
     *
     * @param OpenAPI\Server\Model\BlockIdentifier $blockIdentifier
     *
     * @return $this
     */
    public function setBlockIdentifier(BlockIdentifier $blockIdentifier): BlockIdentifier
    {
        $this->blockIdentifier = $blockIdentifier;

        return $this;
    }

    /**
     * Gets parentBlockIdentifier.
     *
     * @return OpenAPI\Server\Model\BlockIdentifier
     */
    public function getParentBlockIdentifier(): BlockIdentifier
    {
        return $this->parentBlockIdentifier;
    }

    /**
     * Sets parentBlockIdentifier.
     *
     * @param OpenAPI\Server\Model\BlockIdentifier $parentBlockIdentifier
     *
     * @return $this
     */
    public function setParentBlockIdentifier(BlockIdentifier $parentBlockIdentifier): BlockIdentifier
    {
        $this->parentBlockIdentifier = $parentBlockIdentifier;

        return $this;
    }

    /**
     * Gets timestamp.
     *
     * @return int
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }

    /**
     * Sets timestamp.
     *
     * @param int $timestamp  The timestamp of the block in milliseconds since the Unix Epoch. The timestamp is stored in milliseconds because some blockchains produce blocks more often than once a second.
     *
     * @return $this
     */
    public function setTimestamp($timestamp)
    {
        $this->timestamp = $timestamp;

        return $this;
    }

    /**
     * Gets transactions.
     *
     * @return OpenAPI\Server\Model\Transaction[]
     */
    public function getTransactions(): array
    {
        return $this->transactions;
    }

    /**
     * Sets transactions.
     *
     * @param OpenAPI\Server\Model\Transaction[] $transactions
     *
     * @return $this
     */
    public function setTransactions(array $transactions): array
    {
        $this->transactions = $transactions;

        return $this;
    }

    /**
     * Gets metadata.
     *
     * @return array|null
     */
    public function getMetadata(): ?array
    {
        return $this->metadata;
    }

    /**
     * Sets metadata.
     *
     * @param array|null $metadata
     *
     * @return $this
     */
    public function setMetadata(array $metadata = null): ?array
    {
        $this->metadata = $metadata;

        return $this;
    }
}


