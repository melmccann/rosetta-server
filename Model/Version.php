<?php
/**
 * Version
 *
 * PHP version 5
 *
 * @category Class
 * @package  melmccann\rosettaserverstubs\Model
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Rosetta
 *
 * A Standard for Blockchain Interaction
 *
 * The version of the OpenAPI document: 1.3.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace melmccann\rosettaserverstubs\Model;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the Version model.
 *
 * The Version object is utilized to inform the client of the versions of different components of the Rosetta implementation.
 *
 * @package melmccann\rosettaserverstubs\Model
 * @author  OpenAPI Generator team
 */
class Version 
{
        /**
     * The rosetta_version is the version of the Rosetta interface the implementation adheres to. This can be useful for clients looking to reliably parse responses.
     *
     * @var string
     * @SerializedName("rosetta_version")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $rosettaVersion;

    /**
     * The node_version is the canonical version of the node runtime. This can help clients manage deployments.
     *
     * @var string
     * @SerializedName("node_version")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $nodeVersion;

    /**
     * When a middleware server is used to adhere to the Rosetta interface, it should return its version here. This can help clients manage deployments.
     *
     * @var string|null
     * @SerializedName("middleware_version")
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $middlewareVersion;

    /**
     * Any other information that may be useful about versioning of dependent services should be returned here.
     *
     * @var array|null
     * @SerializedName("metadata")
     * @Assert\Type("array")
     * @Type("array")
     */
    protected $metadata;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->rosettaVersion = isset($data['rosettaVersion']) ? $data['rosettaVersion'] : null;
        $this->nodeVersion = isset($data['nodeVersion']) ? $data['nodeVersion'] : null;
        $this->middlewareVersion = isset($data['middlewareVersion']) ? $data['middlewareVersion'] : null;
        $this->metadata = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Gets rosettaVersion.
     *
     * @return string
     */
    public function getRosettaVersion()
    {
        return $this->rosettaVersion;
    }

    /**
     * Sets rosettaVersion.
     *
     * @param string $rosettaVersion  The rosetta_version is the version of the Rosetta interface the implementation adheres to. This can be useful for clients looking to reliably parse responses.
     *
     * @return $this
     */
    public function setRosettaVersion($rosettaVersion)
    {
        $this->rosettaVersion = $rosettaVersion;

        return $this;
    }

    /**
     * Gets nodeVersion.
     *
     * @return string
     */
    public function getNodeVersion()
    {
        return $this->nodeVersion;
    }

    /**
     * Sets nodeVersion.
     *
     * @param string $nodeVersion  The node_version is the canonical version of the node runtime. This can help clients manage deployments.
     *
     * @return $this
     */
    public function setNodeVersion($nodeVersion)
    {
        $this->nodeVersion = $nodeVersion;

        return $this;
    }

    /**
     * Gets middlewareVersion.
     *
     * @return string|null
     */
    public function getMiddlewareVersion()
    {
        return $this->middlewareVersion;
    }

    /**
     * Sets middlewareVersion.
     *
     * @param string|null $middlewareVersion  When a middleware server is used to adhere to the Rosetta interface, it should return its version here. This can help clients manage deployments.
     *
     * @return $this
     */
    public function setMiddlewareVersion($middlewareVersion = null)
    {
        $this->middlewareVersion = $middlewareVersion;

        return $this;
    }

    /**
     * Gets metadata.
     *
     * @return array|null
     */
    public function getMetadata(): ?array
    {
        return $this->metadata;
    }

    /**
     * Sets metadata.
     *
     * @param array|null $metadata  Any other information that may be useful about versioning of dependent services should be returned here.
     *
     * @return $this
     */
    public function setMetadata(array $metadata = null): ?array
    {
        $this->metadata = $metadata;

        return $this;
    }
}


