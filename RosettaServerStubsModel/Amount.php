<?php
/**
 * Amount
 *
 * PHP version 5
 *
 * @category Class
 * @package  melmccann\rosettaserverstubs\RosettaServerStubsModel
 * @author   OpenAPI Generator team
 * @link     https://github.com/openapitools/openapi-generator
 */

/**
 * Rosetta
 *
 * A Standard for Blockchain Interaction
 *
 * The version of the OpenAPI document: 1.3.1
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 *
 */

/**
 * NOTE: This class is auto generated by the openapi generator program.
 * https://github.com/openapitools/openapi-generator
 * Do not edit the class manually.
 */

namespace melmccann\rosettaserverstubs\RosettaServerStubsModel;

use Symfony\Component\Validator\Constraints as Assert;
use JMS\Serializer\Annotation\Type;
use JMS\Serializer\Annotation\SerializedName;

/**
 * Class representing the Amount model.
 *
 * Amount is some Value of a Currency. It is considered invalid to specify a Value without a Currency.
 *
 * @package melmccann\rosettaserverstubs\RosettaServerStubsModel
 * @author  OpenAPI Generator team
 */
class Amount 
{
        /**
     * Value of the transaction in atomic units represented as an arbitrary-sized signed integer.  For example, 1 BTC would be represented by a value of 100000000.
     *
     * @var string
     * @SerializedName("value")
     * @Assert\NotNull()
     * @Assert\Type("string")
     * @Type("string")
     */
    protected $value;

    /**
     * @var melmccann\rosettaserverstubs\RosettaServerStubsModel\Currency
     * @SerializedName("currency")
     * @Assert\NotNull()
     * @Assert\Type("melmccann\rosettaserverstubs\RosettaServerStubsModel\Currency")
     * @Type("melmccann\rosettaserverstubs\RosettaServerStubsModel\Currency")
     */
    protected $currency;

    /**
     * @var array|null
     * @SerializedName("metadata")
     * @Assert\Type("array")
     * @Type("array")
     */
    protected $metadata;

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->value = isset($data['value']) ? $data['value'] : null;
        $this->currency = isset($data['currency']) ? $data['currency'] : null;
        $this->metadata = isset($data['metadata']) ? $data['metadata'] : null;
    }

    /**
     * Gets value.
     *
     * @return string
     */
    public function getValue()
    {
        return $this->value;
    }

    /**
     * Sets value.
     *
     * @param string $value  Value of the transaction in atomic units represented as an arbitrary-sized signed integer.  For example, 1 BTC would be represented by a value of 100000000.
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->value = $value;

        return $this;
    }

    /**
     * Gets currency.
     *
     * @return melmccann\rosettaserverstubs\RosettaServerStubsModel\Currency
     */
    public function getCurrency(): Currency
    {
        return $this->currency;
    }

    /**
     * Sets currency.
     *
     * @param melmccann\rosettaserverstubs\RosettaServerStubsModel\Currency $currency
     *
     * @return $this
     */
    public function setCurrency(Currency $currency): Currency
    {
        $this->currency = $currency;

        return $this;
    }

    /**
     * Gets metadata.
     *
     * @return array|null
     */
    public function getMetadata(): ?array
    {
        return $this->metadata;
    }

    /**
     * Sets metadata.
     *
     * @param array|null $metadata
     *
     * @return $this
     */
    public function setMetadata(array $metadata = null): ?array
    {
        $this->metadata = $metadata;

        return $this;
    }
}


